version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: identity_db
      POSTGRES_USER: identity_user
      POSTGRES_PASSWORD: identity_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - identity_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U identity_user -d identity_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    networks:
      - identity_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Identity Microservice
  identity-service:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: identity_db
      DB_USER: identity_user
      DB_PASSWORD: identity_pass
      DB_SCHEMA: identity
      
      # RabbitMQ
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      RABBITMQ_VHOST: /
      RABBITMQ_EXCHANGE: identity_events
      
      # OTP Configuration
      EMAIL_OTP_ENABLED: "true"
      SMS_OTP_ENABLED: "false"
      OTP_LENGTH: "6"
      OTP_EXPIRY_MINUTES: "10"
      OTP_MAX_ATTEMPTS: "3"
      
      # Application
      ENVIRONMENT: development
      DEBUG: "true"
      LOG_LEVEL: INFO
      PORT: 8001
    ports:
      - "8001:8001"
    networks:
      - identity_network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  identity_network:
    driver: bridge