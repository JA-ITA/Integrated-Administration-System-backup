name: Island Traffic Authority - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_DB: ita_driver_platform_test
  POSTGRES_USER: ita_test
  POSTGRES_PASSWORD: test_password

jobs:
  # Lint Stage - Code Quality & Style Checks
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: ui/yarn.lock

    - name: Install Python Dependencies
      run: |
        cd app
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8 mypy bandit safety

    - name: Install Frontend Dependencies
      run: |
        cd ui
        yarn install --frozen-lockfile

    - name: Python Code Formatting (Black)
      run: |
        cd app
        black --check --diff .

    - name: Python Import Sorting (isort)
      run: |
        cd app
        isort --check-only --diff .

    - name: Python Linting (Flake8)
      run: |
        cd app
        flake8 --max-line-length=88 --extend-ignore=E203,W503 .

    - name: Python Type Checking (MyPy)
      run: |
        cd app
        mypy --ignore-missing-imports .

    - name: Python Security Checks (Bandit)
      run: |
        cd app
        bandit -r . -x /tests/

    - name: Python Security Vulnerability Check (Safety)
      run: |
        cd app
        safety check

    - name: Frontend Linting (ESLint)
      run: |
        cd ui
        yarn lint

    - name: Frontend Type Checking (TypeScript)
      run: |
        cd ui
        yarn type-check

    - name: Frontend Code Formatting (Prettier)
      run: |
        cd ui
        yarn format:check

  # Test Stage - Automated Testing
  test:
    name: Automated Testing
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: ui/yarn.lock

    - name: Install Python Dependencies
      run: |
        cd app
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx

    - name: Install Frontend Dependencies
      run: |
        cd ui
        yarn install --frozen-lockfile

    - name: Run Database Migrations
      run: |
        cd app
        alembic upgrade head
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}

    - name: Backend Unit Tests
      run: |
        cd app
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        REDIS_URL: redis://localhost:6379/0
        TESTING: true

    - name: Frontend Unit Tests
      run: |
        cd ui
        yarn test --coverage --watchAll=false

    - name: Upload Backend Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./app/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload Frontend Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./ui/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Build Stage - Application Build Verification
  build:
    name: Application Build & Docker Images
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Backend Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./app
        file: ./app/Dockerfile
        push: false
        tags: ita-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Frontend Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./ui
        file: ./ui/Dockerfile
        push: false
        tags: ita-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Compose Build
      run: |
        docker-compose -f docker-compose.yml build
        docker-compose -f docker-compose.yml config

  # Integration Tests
  integration:
    name: Integration & E2E Testing
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Start Services
      run: |
        docker-compose up -d
        
    - name: Wait for Services
      run: |
        timeout 300 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'
        timeout 300 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'

    - name: Run Integration Tests
      run: |
        cd app
        python -m pytest tests/integration/ -v

    - name: Run E2E Tests
      run: |
        cd ui
        yarn test:e2e

    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Deployment (for main branch)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: kubectl apply -f k8s/staging/
        
    - name: Health Check
      run: |
        echo "Running post-deployment health checks..."
        # Add health check commands here

    - name: Notify Deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()